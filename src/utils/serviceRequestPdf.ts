
import { ServiceRequest } from "../types";
import jsPDF from "jspdf";

/**
 * Helper to add a line with label and value, with nice spacing.
 */
function addLabelValue(doc: jsPDF, label: string, value: string, y: number, options?: { bold?: boolean }) {
  doc.setFont('helvetica', options?.bold ? 'bold' : 'normal');
  doc.text(`${label}:`, 16, y);
  doc.setFont('helvetica', 'normal');
  doc.text(value, 60, y);
}

export function generateServiceRequestPdf(request: ServiceRequest) {
  const doc = new jsPDF();

  // Header Banner
  doc.setFillColor(38, 110, 232); // blue header
  doc.rect(0, 0, 210, 24, 'F');
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(18);
  doc.text('ACME Services', 16, 16); // Company branding/title (edit as needed)

  // Page Title
  doc.setFontSize(20);
  doc.setTextColor(48, 48, 48);
  doc.setFont('helvetica', 'bold');
  doc.text('Service Request Report', 16, 36);

  // Draw a box around the ticket details
  doc.setDrawColor(180);
  doc.rect(14, 43, 182, 52, ''); // x, y, w, h

  // Ticket details
  doc.setFontSize(12);
  let y = 51;
  addLabelValue(doc, "Ticket ID", request.ticketId, y, { bold: true });
  addLabelValue(doc, "Title", request.title, y + 7);
  addLabelValue(doc, "Priority", request.priority.toUpperCase(), y + 14);
  addLabelValue(doc, "Status", request.status.replace('_', ' ').toUpperCase(), y + 21);
  addLabelValue(doc, "Client", request.clientName || "—", y + 28);

  // Show assigned tech if present
  let techName = request.technicianName || "Unassigned";
  addLabelValue(doc, "Technician", techName, y + 35);
  addLabelValue(doc, "Created At", new Date(request.createdAt).toLocaleString(), y + 42);
  addLabelValue(
    doc,
    "Assigned At",
    request.assignedAt ? new Date(request.assignedAt).toLocaleString() : "Not Assigned",
    y + 49
  );
  addLabelValue(
    doc,
    "Resolved At",
    request.updatedAt ? new Date(request.updatedAt).toLocaleString() : "N/A",
    y + 56
  );

  // Description Section
  let descY = 102;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.setTextColor(38, 110, 232);
  doc.text("Issue Description", 16, descY);

  doc.setDrawColor(220, 220, 220);
  doc.setFillColor(245, 247, 255);
  doc.roundedRect(14, descY + 4, 182, 18, 2, 2, 'F');
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(50, 50, 50);
  doc.setFontSize(12);
  doc.text(doc.splitTextToSize(request.description, 178), 18, descY + 14);

  // Resolution Notes Section
  let notesStartY = descY + 28;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.setTextColor(76, 175, 80);
  doc.text("Resolution Notes", 16, notesStartY);

  doc.setDrawColor(205, 233, 208);
  doc.setFillColor(239, 250, 243);
  doc.roundedRect(14, notesStartY + 4, 182, 30, 2, 2, 'F');
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(33, 86, 50);
  doc.setFontSize(12);
  if (request.resolutionNotes) {
    doc.text(doc.splitTextToSize(request.resolutionNotes, 178), 18, notesStartY + 12);
  } else {
    doc.text("No resolution notes provided.", 18, notesStartY + 12);
  }

  // Footer
  doc.setDrawColor(220, 220, 220);
  doc.setLineWidth(0.2);
  doc.line(14, 270, 196, 270);
  doc.setFontSize(10);
  doc.setTextColor(180, 180, 180);
  doc.text("Generated by ACME Services · " + new Date().toLocaleString(), 16, 277);

  doc.save(`ServiceRequest-${request.ticketId}.pdf`);
}
