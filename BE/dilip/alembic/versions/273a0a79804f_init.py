"""init

Revision ID: 273a0a79804f
Revises: 
Create Date: 2025-06-27 14:31:52.904297

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '273a0a79804f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('clients')
    op.drop_table('asset_requests')
    op.drop_table('service_requests')
    op.drop_table('company_assets')
    op.drop_table('devices')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('avatar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("role = ANY (ARRAY['admin'::text, 'technician'::text, 'client'::text])", name='users_role_check'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('devices',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('devices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('device_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('device_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('manufacturer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('serial_number', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('purchase_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('warranty_expiry', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("device_type = ANY (ARRAY['PC'::text, 'Server'::text, 'Network'::text, 'CCTV'::text, 'Printer'::text, 'Other'::text])", name='devices_device_type_check'),
    sa.CheckConstraint("status = ANY (ARRAY['active'::text, 'in_repair'::text, 'retired'::text, 'maintenance'::text])", name='devices_status_check'),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='devices_client_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='devices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('company_assets',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('company_assets_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('asset_tag', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('asset_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('assigned_to', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('last_maintenance', sa.DATE(), autoincrement=False, nullable=True),
    sa.CheckConstraint("asset_type = ANY (ARRAY['Laptop'::text, 'Desktop'::text, 'Monitor'::text, 'Network_Equipment'::text, 'Tool'::text, 'Other'::text])", name='company_assets_asset_type_check'),
    sa.CheckConstraint("status = ANY (ARRAY['available'::text, 'assigned_to_tech'::text, 'on_loan_to_client'::text, 'maintenance'::text])", name='company_assets_status_check'),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name='company_assets_assigned_to_fkey'),
    sa.PrimaryKeyConstraint('id', name='company_assets_pkey'),
    sa.UniqueConstraint('asset_tag', name='company_assets_asset_tag_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_requests',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ticket_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('assigned_to', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('submitted_by', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'urgent'::text])", name='service_requests_priority_check'),
    sa.CheckConstraint("status = ANY (ARRAY['open'::text, 'assigned'::text, 'in_progress'::text, 'resolved'::text, 'closed'::text])", name='service_requests_status_check'),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name='service_requests_assigned_to_fkey'),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='service_requests_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], name='service_requests_device_id_fkey'),
    sa.ForeignKeyConstraint(['submitted_by'], ['users.id'], name='service_requests_submitted_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_requests_pkey'),
    sa.UniqueConstraint('ticket_id', name='service_requests_ticket_id_key')
    )
    op.create_table('asset_requests',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('requested_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('request_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("request_type = ANY (ARRAY['assignment'::text, 'modification'::text, 'maintenance'::text])", name='asset_requests_request_type_check'),
    sa.CheckConstraint("status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])", name='asset_requests_status_check'),
    sa.ForeignKeyConstraint(['asset_id'], ['company_assets.id'], name='asset_requests_asset_id_fkey'),
    sa.ForeignKeyConstraint(['requested_by'], ['users.id'], name='asset_requests_requested_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='asset_requests_pkey')
    )
    op.create_table('clients',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('contact_person', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("type = ANY (ARRAY['managed_site'::text, 'individual'::text, 'walk_in'::text])", name='clients_type_check'),
    sa.PrimaryKeyConstraint('id', name='clients_pkey'),
    sa.UniqueConstraint('email', name='clients_email_key')
    )
    # ### end Alembic commands ###
